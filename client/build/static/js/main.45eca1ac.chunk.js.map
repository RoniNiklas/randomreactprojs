{"version":3,"sources":["Wolt/Components/RestaurantItem/RestaurantItem.js","Wolt/services/restaurant.js","Wolt/Components/RestaurantList/RestaurantList.js","Wolt/Components/RestaurantRandomizer/RestaurantRandomizer.js","Wolt/WoltApp.js","components/Menu/Menu.js","components/Front/ComponentItem/ComponentItem.js","components/Front/Front.js","Eficode/utils/map.js","Eficode/Components/Map/Map.js","Eficode/utils/time.js","Eficode/utils/leg.js","Eficode/Components/LegEntry/LegEntry.js","Eficode/Components/ItineraryEntry/ItineraryEntry.js","Eficode/utils/itineraries.js","Eficode/Components/ItinerariesTab/ItinerariesTab.js","Eficode/Components/InputForm/InputForm.js","Eficode/services/hslApi.js","Eficode/EficodeApp.js","App.js","index.js"],"names":["RestaurantItem","restaurant","useState","image","setImage","useEffect","loadedImage","Image","loadImage","a","onload","src","Card","className","Img","alt","as","hash","blurhash","width","height","resolutionX","resolutionY","Header","name","Text","description","style","backgroundColor","online","nameCompare","b","nameA","toUpperCase","nameB","comparison","restaurantsJSON","restaurants","order","sort","reverse","RestaurantList","restaurantState","setRestaurantState","event","sortedRestaurants","restaurantService","target","value","Button","variant","onClick","map","key","RestaurantRandomizer","setRestaurant","roll","e","preventDefault","start","Math","floor","random","length","i","snd","Audio","volume","play","Promise","r","setTimeout","min","WoltApp","setRestaurants","Menu","Navbar","collapseOnSelect","bg","expand","Brand","Link","href","to","Toggle","aria-controls","Collapse","id","Nav","ComponentItem","component","Body","Footer","path","Front","mode","legGeometry","poly","decode","RouteMap","bounds","end","Map","boundsOptions","padding","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","tileSize","zoomOffset","TileLayer","attribution","url","Marker","position","Popup","Polyline","dashArray","positions","mapUtil","color","milliseconds","date","Date","getHours","getMinutes","toString","leg","max","from","lat","lon","parseEndLocation","charAt","substr","toLowerCase","trip","routeShortName","round","distance","timeUtil","startTime","endTime","duration","LegEntry","index","legUtils","points","ItineraryEntry","itinerary","legs","ItinerariesTab","tabKey","setKey","itineraries","Tabs","activeKey","onSelect","k","mountOnEnter","unmountOnExit","Tab","eventKey","title","itinerariesUtil","InputForm","setLocation","getItineraries","Form","onSubmit","type","alignSelf","Group","Label","Control","placeholder","onChange","createItineraryQuery","fetchItineraries","axios","post","headers","response","fetchedItineraries","data","plan","getLocationCoordinates","text","get","coordinates","features","geometry","coords","latitude","longitude","EficodeApp","setItineraries","location","error","setError","loading","setLoading","handleItineraries","fetchAndHandleItineraries","hslApiService","navigator","geolocation","getCurrentPosition","Alert","Spinner","animation","role","App","exact","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.45eca1ac.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Card from \"react-bootstrap/Card\"\r\nimport \"./RestaurantItem.css\"\r\nimport { Blurhash } from \"react-blurhash\"\r\n\r\nconst RestaurantItem = ({ restaurant }) => {\r\n    const [image, setImage] = useState()\r\n    useEffect(() => {\r\n        const loadedImage = new Image()\r\n        if (restaurant.loadImage) {\r\n            const loadImage = async () => {\r\n                loadedImage.onload = () => { setImage(loadedImage) }\r\n                loadedImage.src = restaurant.image\r\n            }\r\n            loadImage()\r\n        } else setImage()\r\n        return () => {\r\n            loadedImage.onload = () => {}\r\n        }\r\n    }, [restaurant])\r\n\r\n    return (\r\n        <Card className=\"card bg-light text-black restaurantItem\">\r\n            {image && restaurant.loadImage\r\n                ? <Card.Img src={image.src} className=\"restaurantImage\" alt=\"Card image\" />\r\n                : <Blurhash as={Card.Img}\r\n                    hash={restaurant.blurhash}\r\n                    width=\"100%\"\r\n                    height=\"240px\"\r\n                    resolutionX={64}\r\n                    resolutionY={64}\r\n                />\r\n            }\r\n            <Card.Header className=\"restaurantHeader\">{restaurant.name}</Card.Header>\r\n            <Card.Text className=\"description\">\r\n                {restaurant.description}\r\n            </Card.Text>\r\n            <Card.Text className=\"open\" style={{ backgroundColor: restaurant.online ? \"green\" : \"red\" }}>\r\n                {restaurant.online ? \"Open\" : \"Closed\"}\r\n            </Card.Text>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default RestaurantItem","import restaurantsJSON from \"../data/restaurants\"\r\n\r\nconst getAll = () => {\r\n    const restaurants = restaurantsJSON.restaurants\r\n    return restaurants\r\n}\r\n\r\nconst nameCompare = (a, b) => {\r\n    const nameA = a.name.toUpperCase()\r\n    const nameB = b.name.toUpperCase()\r\n\r\n    let comparison = 0\r\n    if (nameA > nameB) {\r\n        comparison = 1\r\n    } else if (nameA < nameB) {\r\n        comparison = -1\r\n    }\r\n    return comparison\r\n}\r\n\r\nconst sort = (restaurants, order) => {\r\n    return order === \"alphabetically\"\r\n        ? [...restaurants].sort(nameCompare)\r\n        : [...restaurants].sort(nameCompare).reverse()\r\n}\r\nexport default { getAll, sort }","import React, { useState } from 'react'\r\nimport RestaurantItem from \"../RestaurantItem/RestaurantItem\"\r\nimport restaurantService from \"../../services/restaurant\"\r\nimport Button from 'react-bootstrap/Button'\r\nimport \"./RestaurantList.css\"\r\n\r\nconst RestaurantList = ({ restaurants }) => {\r\n    const [restaurantState, setRestaurantState] = useState(restaurants)\r\n\r\n    const sort = (event) => {\r\n        const sortedRestaurants = restaurantService.sort(restaurants, event.target.value)\r\n        setRestaurantState(sortedRestaurants)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Or select from all restaurants</h2>\r\n            <div className=\"buttonRow\">\r\n                <Button variant=\"primary\" value=\"alphabetically\" className=\"sorting-button\" onClick={sort}>Sort alphabetically from A to Z</Button>\r\n                <Button variant=\"primary\" value=\"in-reverse\" className=\"sorting-button\" onClick={sort}>Sort alphabetically from Z to A</Button>\r\n            </div>\r\n            <div className=\"restaurant-list\">\r\n                {restaurantState.map(restaurant => <RestaurantItem key={restaurant.name} restaurant={{ ...restaurant, loadImage: true }} />)}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RestaurantList","import React, { useState } from \"react\"\r\nimport RestaurantItem from \"../RestaurantItem/RestaurantItem\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport \"./RestaurantRandomizer.css\"\r\n\r\nconst RestaurantRandomizer = ({ restaurants }) => {\r\n\r\n    const [restaurant, setRestaurant] = useState()\r\n\r\n    const roll = async (e) => {\r\n        e.preventDefault()\r\n        let start = Math.floor(Math.random() * restaurants.length)\r\n        let i;\r\n        for (i = 0; i < 28; i++) {\r\n          start = (start + 1) > (restaurants.length - 1) ? 0 : start + 1\r\n          var snd = new Audio(\"data:audio/wav;base64,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qJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=\");\r\n          snd.volume = 0.1\r\n          snd.play();\r\n          setRestaurant({...restaurants[start], loadImage:false})\r\n          await new Promise(r => setTimeout(r, Math.min(300, i * 0.05 * 300)));\r\n        }\r\n        setRestaurant({...restaurants[start], loadImage:true})\r\n      }\r\n\r\n    return (\r\n        <div className=\"restaurant-randomizer\">\r\n            <h2>Roll a random restaurant</h2>\r\n            <Button variant=\"primary\" onClick={roll}>Roll</Button>\r\n            {restaurant && <RestaurantItem restaurant={restaurant} />}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default RestaurantRandomizer","import React, { useState, useEffect } from 'react'\r\nimport RestaurantList from './Components/RestaurantList/RestaurantList'\r\nimport RestaurantRandomizer from \"./Components/RestaurantRandomizer/RestaurantRandomizer\"\r\nimport restaurantService from \"./services/restaurant\"\r\nimport \"./WoltApp.css\"\r\n\r\nconst WoltApp = () => {\r\n    const [restaurants, setRestaurants] = useState()\r\n    useEffect(() => {\r\n        setRestaurants(restaurantService.getAll())\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"woltapp-root\">\r\n            {restaurants && <RestaurantRandomizer restaurants={restaurants} />}\r\n            {restaurants && <RestaurantList restaurants={restaurants} />}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default WoltApp","import React from \"react\"\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Navbar from \"react-bootstrap/Navbar\"\r\nimport { Link } from \"react-router-dom\"\r\nimport \"./Menu.css\"\r\n\r\nconst Menu = () => {\r\n    return (\r\n        <Navbar className=\"menu\" collapseOnSelect bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand as={Link} href='#' to='/'>Random collection</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link as={Link} href='#' to='/wolt'>\r\n                        Restaurant Lister\r\n                    </Nav.Link>\r\n                    <Nav.Link as={Link} href='#' to='/eficode'>\r\n                        Eficode Routing App\r\n                    </Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Menu","import React from \"react\"\r\nimport Card from \"react-bootstrap/Card\"\r\nimport { Link } from \"react-router-dom\"\r\nimport \"./ComponentItem.css\"\r\n\r\nconst ComponentItem = ({ component }) => {\r\n    return (\r\n        <Card className=\"componentItem\">\r\n            <Card.Header>\r\n                <strong className=\"mr-auto\">{component.name}</strong>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                {component.description}\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                <Link to={component.path}>Go to app</Link>\r\n            </Card.Footer>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ComponentItem","import React from \"react\"\r\nimport ComponentItem from \"./ComponentItem/ComponentItem\"\r\nimport \"./Front.css\"\r\n\r\nconst Front = () => {\r\n    const components = [\r\n        {\r\n            id: 1,\r\n            name: \"Restaurant Listing App\",\r\n            description: \"This app displays a restaurant list and allows for sorting alphabetically and rolling a random restaurant from the list. Done as a part of the application process for Wolt's internship.\",\r\n            path: \"/wolt\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Eficode Routing App\",\r\n            description: \"This app polls the HSL routing API to find you a public transport route from where you are to the Eficode Offices at Pohjoinen Rautatiekatu 25. Done as a part of the application process for Eficode's internship.\",\r\n            path: \"/eficode\"\r\n        }\r\n    ]\r\n    return (\r\n        <div className=\"front-root\">\r\n            <p> Below, you'll find a list of different random small react projects I've done. These can also be reached via the menu bar above. </p>\r\n            <div className=\"component-listing\">\r\n                {components.map(component => <ComponentItem key={component.id} component={component} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Front","import poly from \"@mapbox/polyline\"\r\n\r\nconst decodeRoute = (legGeometry) => {\r\n    return poly.decode(legGeometry)\r\n}\r\n\r\nconst colorModeMatcher = (mode) => {\r\n    switch (mode.toUpperCase()) {\r\n        case \"WALK\": {\r\n            return \"#6ba3af\"\r\n        }\r\n        case \"RAIL\": {\r\n            return \"#8c4799\"\r\n        }\r\n        case \"TRAM\": {\r\n            return \"#00985f\"\r\n        }\r\n        case \"SUBWAY\": {\r\n            return \"#ff6319\"\r\n        }\r\n        case \"FERRY\": {\r\n            return \"#00b9e4\"\r\n        }\r\n        default: {\r\n            return \"#007ac9\"\r\n        }\r\n    }\r\n}\r\n\r\nexport default { colorModeMatcher, decodeRoute }","import React from \"react\"\r\nimport { Map, TileLayer, Marker, Popup, Polyline } from \"react-leaflet\"\r\nimport mapUtil from \"../../utils/map\"\r\nimport \"./Map.css\"\r\n\r\nconst RouteMap = ({ bounds, start, end, legGeometry, mode }) => {\r\n\r\n    return (\r\n        <Map\r\n            bounds={bounds}\r\n            boundsOptions={{ padding: [40, 40] }}\r\n            maxZoom={18}\r\n            attributionControl={true}\r\n            zoomControl={true}\r\n            doubleClickZoom={true}\r\n            scrollWheelZoom={true}\r\n            dragging={true}\r\n            animate={true}\r\n            easeLinearity={0.35}\r\n            tileSize={512}\r\n            zoomOffset={-1}\r\n        >\r\n            <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a>'\r\n                url=\"https://cdn.digitransit.fi/map/v1/hsl-map/{z}/{x}/{y}.png\"\r\n            />\r\n            <Marker position={start}>\r\n                <Popup>\r\n                    Start location\r\n                </Popup>\r\n            </Marker>\r\n            <Marker position={end}>\r\n                <Popup>\r\n                    End location\r\n                </Popup>\r\n            </Marker>\r\n            <Polyline\r\n                dashArray={mode === \"WALK\" ? \"5\" : \"0\"}\r\n                positions={mapUtil.decodeRoute(legGeometry)}\r\n                color={mapUtil.colorModeMatcher(mode)} />\r\n        </Map>\r\n    )\r\n}\r\n\r\nexport default RouteMap\r\n","const parseTime = (milliseconds) => {\r\n    const date = new Date(milliseconds)\r\n    return date.getHours() + \":\" + (date.getMinutes().toString().length === 1 ? \"0\" + date.getMinutes() : date.getMinutes())\r\n}\r\n\r\nexport default { parseTime }","import timeUtil from \"./time\"\r\n\r\nconst calculateBounds = (leg) => {\r\n    return [\r\n        [Math.max(leg.from.lat, leg.to.lat), Math.min(leg.from.lon, leg.to.lon)],\r\n        [Math.min(leg.from.lat, leg.to.lat), Math.max(leg.from.lon, leg.to.lon)]\r\n    ]\r\n}\r\n\r\nconst parseStartLocation = (name) => {\r\n    return name === \"Origin\" ? \"Starting location\" : name\r\n}\r\n\r\nconst parseEndLocation = (name) => {\r\n    return name === \"Destination\" ? \"the Eficode Offices\" : name\r\n}\r\n\r\nconst parseFromToInfo = (leg) => {\r\n    const start = parseStartLocation(leg.from.name)\r\n    const end = parseEndLocation(leg.to.name)\r\n    return \". \" + start + \" to \" + end\r\n}\r\n\r\nconst parseTimeInfo = (leg) => {\r\n    const startTime = timeUtil.parseTime(leg.startTime)\r\n    const endTime = timeUtil.parseTime(leg.endTime)\r\n    return startTime + \"-\" + endTime + \" (around \" + Math.round(leg.duration / 60) + \" minutes)\"\r\n}\r\n\r\nconst parseDirections = (leg) => {\r\n    const mode = leg.mode === \"RAIL\" ? \"Train\" : leg.mode\r\n    const directions = mode.charAt(0).toUpperCase() + mode.substr(1).toLowerCase() + (leg.trip ? \" (\" + leg.trip.routeShortName + \")\" : \"\") + \" for \" + Math.round(leg.distance/100) / 10 + \"km\"\r\n    return directions\r\n}\r\n\r\nexport default { calculateBounds, parseFromToInfo, parseDirections, parseTimeInfo }","import React from \"react\"\r\nimport Map from \"../Map/Map\"\r\nimport Card from \"react-bootstrap/Card\"\r\nimport legUtils from \"../../utils/leg\"\r\nimport \"./LegEntry.css\"\r\n\r\nconst LegEntry = ({ index, leg }) => {\r\n\r\n    return (\r\n        <div className=\"legEntry\">\r\n            <Card className=\"legEntry-card\">\r\n                <Card.Header>\r\n                    {index + 1 + legUtils.parseFromToInfo(leg)}\r\n                </Card.Header>\r\n                <Card.Header>\r\n                    {legUtils.parseTimeInfo(leg)}\r\n                </Card.Header>\r\n                <Card.Header>\r\n                    {legUtils.parseDirections(leg)}\r\n                </Card.Header>\r\n                <Map key={leg.legGeometry.points} bounds={legUtils.calculateBounds(leg)} start={[leg.from.lat, leg.from.lon]} end={[leg.to.lat, leg.to.lon]} legGeometry={leg.legGeometry.points} mode={leg.mode} />\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LegEntry\r\n","import React from \"react\"\r\nimport LegEntry from \"../LegEntry/LegEntry\"\r\nimport \"./ItineraryEntry.css\"\r\n\r\nconst ItineraryEntry = ({ itinerary }) => {\r\n    return (\r\n        <>\r\n            {itinerary.legs.map((leg, index) => <LegEntry key={index} index={index} leg={leg} />)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItineraryEntry\r\n","import timeUtil from \"./time\"\r\n\r\nconst parseTitle = (index, itinerary) => {\r\n    return \"Option \" + (index + 1) + \" (\" + timeUtil.parseTime(itinerary.legs[0].startTime) + \"-\" + timeUtil.parseTime(itinerary.legs[itinerary.legs.length - 1].endTime) + \")\"\r\n}\r\n\r\nexport default { parseTitle }","import React from \"react\"\r\nimport Tabs from \"react-bootstrap/Tabs\"\r\nimport Tab from \"react-bootstrap/Tab\"\r\nimport ItineraryEntry from \"../ItineraryEntry/ItineraryEntry\"\r\nimport itinerariesUtil from \"../../utils/itineraries\"\r\nimport \"./ItinerariesTab.css\"\r\n\r\nconst ItinerariesTab = ({ tabKey, setKey, itineraries }) => {\r\n\r\n    return (\r\n        <>\r\n            <Tabs\r\n                activeKey={tabKey}\r\n                onSelect={k => setKey(k)}\r\n                mountOnEnter={true}\r\n                unmountOnExit={true}         \r\n            >\r\n                {itineraries.map((itinerary, index) => {\r\n                    return (\r\n                        <Tab className=\"itineraryTab\" key={index} eventKey={index} title={itinerariesUtil.parseTitle(index, itinerary)}>\r\n                            <ItineraryEntry key={index} index={index} itinerary={itinerary} />\r\n                        </Tab>\r\n                    )\r\n                })}\r\n            </Tabs>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItinerariesTab\r\n","import React from \"react\"\r\nimport Form from \"react-bootstrap/Form\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport \"./InputForm.css\"\r\n\r\nconst InputForm = ({ setLocation, getItineraries }) => {\r\n    return (\r\n        <Form\r\n            className=\"form\"\r\n            onSubmit={getItineraries}\r\n        >\r\n            <Button type=\"submit\" style={{alignSelf:\"center\"}}>GET ME TO WORK</Button>\r\n            <Form.Group>\r\n                <Form.Label>Enter your location</Form.Label>\r\n                <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Your Location\"\r\n                    onChange={(event) => setLocation(event.target.value)}\r\n                />\r\n                <Form.Text className=\"text-muted\">\r\n                    Suitable inputs include addresses, place names, and unique places like Tuomiokirkko. If this is left empty, the app will try to use your location data instead.\r\n                 </Form.Text>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default InputForm\r\n","import axios from \"axios\"\r\n\r\nconst createItineraryQuery = (lat, lon) => {\r\n    return (`\r\n    {\r\n        plan(\r\n            from: { lat: ${lat}, lon: ${lon} }\r\n          to: { lat: 60.169447, lon: 24.925796 }\r\n          numItineraries: 3\r\n        ) {\r\n            itineraries {\r\n                legs {\r\n                    startTime\r\n                    endTime\r\n                    mode\r\n                    trip {\r\n                        routeShortName\r\n                    }\r\n                    duration\r\n                    distance\r\n                    from {\r\n                        name\r\n                        lat\r\n                        lon\r\n                        stop {\r\n                            name\r\n                        }\r\n                    }\r\n                    to {\r\n                        name\r\n                        lat\r\n                        lon\r\n                        stop {\r\n                            name\r\n                        }\r\n                    }\r\n                    legGeometry {\r\n                        length\r\n                        points\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }`\r\n    )\r\n}\r\n\r\nconst fetchItineraries = async (lat, lon) => {\r\n    const response = await axios.post(\r\n        \"https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql\",\r\n        createItineraryQuery(lat, lon),\r\n        {\r\n            headers: { \"Content-Type\": \"application/graphql\" },\r\n        })\r\n    const fetchedItineraries = response.data.data.plan.itineraries\r\n    return fetchedItineraries\r\n}\r\n\r\nconst getLocationCoordinates = async (text) => {\r\n    const response = await axios.get(\"https://api.digitransit.fi/geocoding/v1/search?text=\" + text + \"&boundary.circle.lat=60.169447&boundary.circle.lon=24.925796&boundary.circle.radius=50\")\r\n    const coordinates = response.data.features[0].geometry.coordinates\r\n    return {coords:{latitude: coordinates[1], longitude:coordinates[0]}}\r\n}\r\n\r\nexport default { fetchItineraries, getLocationCoordinates }","import React, { useState } from 'react'\r\nimport Alert from \"react-bootstrap/Alert\"\r\nimport Spinner from \"react-bootstrap/Spinner\"\r\nimport ItinerariesTab from \"./Components/ItinerariesTab/ItinerariesTab\"\r\nimport InputForm from \"./Components/InputForm/InputForm\"\r\nimport hslApiService from \"./services/hslApi\"\r\nimport \"./EficodeApp.css\"\r\n\r\nconst EficodeApp = () => {\r\n    //https://github.com/eficode/assignment-timetables\r\n    //https://digitransit.fi/en/developers/apis/1-routing-api/0-graphql/\r\n    //https://api.digitransit.fi/graphiql/hsl?query=%257B%250A%2520%2520plan%28%250A%2520%2520%2520%2520from%253A%2520%257Blat%253A%252060.168992%252C%2520lon%253A%252024.932366%257D%250A%2520%2520%2520%2520to%253A%2520%257Blat%253A%252060.175294%252C%2520lon%253A%252024.684855%257D%250A%2520%2520%2520%2520numItineraries%253A%25203%250A%2520%2520%29%2520%257B%250A%2520%2520%2520%2520itineraries%2520%257B%250A%2520%2520%2520%2520%2520%2520legs%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520startTime%250A%2520%2520%2520%2520%2520%2520%2520%2520endTime%250A%2520%2520%2520%2520%2520%2520%2520%2520mode%250A%2520%2520%2520%2520%2520%2520%2520%2520duration%250A%2520%2520%2520%2520%2520%2520%2520%2520realTime%250A%2520%2520%2520%2520%2520%2520%2520%2520distance%250A%2520%2520%2520%2520%2520%2520%2520%2520transitLeg%250A%2520%2520%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%257D%250A%2520%2520%257D%250A%257D\r\n    //https://repl.it/@digitransit/PolylineDecode\r\n    //https://repl.it/@digitransit/PolylineDecodeMap\r\n\r\n    const [itineraries, setItineraries] = useState()\r\n    const [location, setLocation] = useState()\r\n    const [error, setError] = useState()\r\n    const [key, setKey] = useState(0)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const handleItineraries = async (fetchedItineraries) => {\r\n        if (fetchedItineraries.length > 0) {\r\n            setKey(0)\r\n            setItineraries(fetchedItineraries)\r\n            setError()\r\n        } else {\r\n            setItineraries()\r\n            setError(\"Could not find a route from that location. Try a different one.\")\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    const fetchAndHandleItineraries = async (coordinates) => {\r\n        const fetchedItineraries = await hslApiService.fetchItineraries(coordinates.coords.latitude, coordinates.coords.longitude)\r\n        handleItineraries(fetchedItineraries)\r\n    }\r\n\r\n    const getItineraries = async (event) => {\r\n        event.preventDefault()\r\n        try {\r\n            setLoading(true)\r\n            if (!location) {\r\n                navigator.geolocation.getCurrentPosition(fetchAndHandleItineraries, () => { \r\n                    setError(\"Could not use location data.\")\r\n                    setLoading(false)\r\n                })\r\n            } else {\r\n                const coordinates = await hslApiService.getLocationCoordinates(location)\r\n                fetchAndHandleItineraries(coordinates)\r\n            }\r\n        } catch (error) {\r\n            setItineraries()\r\n            setLoading(false)\r\n            setError(\"Could not find a route from that location. Try a different one.\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"eficode-root\">\r\n            {error && <Alert variant=\"primary\">{error}</Alert>}\r\n            <InputForm setLocation={setLocation} getItineraries={getItineraries} />\r\n            {loading && <Spinner animation=\"border\" role=\"status\" />}\r\n            {itineraries && <ItinerariesTab itineraries={itineraries} setKey={setKey} tabKey={key} />}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default EficodeApp","import React from 'react'\nimport './App.css'\nimport WoltApp from \"./Wolt/WoltApp\"\nimport Menu from \"./components/Menu/Menu\"\nimport Front from \"./components/Front/Front\"\nimport { Route } from \"react-router-dom\"\nimport EficodeApp from './Eficode/EficodeApp'\n\nfunction App() {\n  return (\n    <>\n      < Menu />\n      <Route exact path=\"/\" render={() => <Front />} />\n      <Route exact path=\"/wolt\" render={() => <WoltApp />} />\n      <Route exact path=\"/eficode\" render={() => <EficodeApp />} />\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n    <>\n        <Router>\n            <App />\n        </Router>\n    </>\n    ,\n    document.getElementById('root'))"],"sourceRoot":""}